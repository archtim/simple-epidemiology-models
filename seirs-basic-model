# This notebook implements a basic Susceptible, Exposed, Infected, Recovered, Susceptible (SEIRS) model for infectious disease
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from scipy.integrate import odeint

#The following two functions implement the differential equations for the model

# This function implements the derivative calculations
# It is only called by the SIR_model function - not intended to be called directly
def SEIRS_derivatives(y, t, N, beta, gamma, sigma):
    S, E, I, R = y
    dSdt = -beta * S * I / N
    dEdt = (beta * S * I / N) - sigma * E
    dIdt = (sigma * E) - (gamma * I)
    dRdt = gamma * I
    return dSdt, dEdt, dIdt, dRdt

# This function is intended to be called to execute the SEIRS model
# N: Total population
# S0: Initial number of susceptible people
# E0: Initial number of exposed people
# I0: Initial number of infected people
# R0: Initial number of people who have recovered or died as a result of the disease
# beta: Average number of contacts per person per time multiplied by the probability of disease transmission
# gamma: Rate of recovery or mortality
# sigma: Rate that people who have recovered become susceptible again due to loss of immunity
# ts: Time series
# returns: Returns 4 arrays of len(ts), i.e. one series each for susceptible, exposed, infected and recovered people
def SEIRS_model(N,I0,E0,R0,beta,gamma,sigma,ts):
    S0 = N - I0 - R0 - E0
    y0 = S0, I0, R0, E0
    return odeint(SEIRS_derivatives, y0, ts, args=(N, beta, gamma, sigma))
    
# Change the following values to execute the model for a specific scenario
N = 100000 #Total population
I0 = 100 # Initial number of infected people
R0 = 20 # Initial number of recovered people
E0 = 0 # Initial number of exposed people
beta = 0.24 # Average number of contacts per person per time multiplied by the probability of disease transmission
gamma = 0.11 # Rate of recovery or mortality
sigma = 0.4 # Rate that people who have recovered become susceptible again due to loss of immunity

# Create a numpy array of time points (in days)
# Range from 0 to 120 in increments of 1 (day)
t = np.linspace(0, 120, 120, 120)

# Call the SEIRS model function
ret = SEIRS_model(N,I0,E0,R0,beta,gamma,sigma,t)

# Transpose the results separate arrays
S, E, I, R = ret.T

# Plot the data on four separate curves for S(t), E(t), I(t) and R(t)
plt.figure(figsize=[24,12])
plt.plot(t, S/N, label='Susceptible')
plt.plot(t, E/N, label='Exposed')
plt.plot(t, I/N, label='Infected')
plt.plot(t, R/N, label='Recovered')
plt.legend()
plt.title(label='Basic SEIRS Model', loc='center')
plt.show()
plt.close()
